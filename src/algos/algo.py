from buildgraph import build_graph4append, build_graph4adyaSI_chain, build_graph4adyaSI
from checker.checkers import *
from utils.graphs import ArgumentedPolyGraph


# 0-Z3GSI, 1-Z3 Adya SI, 2-Mono Adya SI, 3-Mono Adys SI Optimzied, 4-BCGraph,
# 5-BCGraphOptimized(only cobra's 2 optimizations)
# 6-BCGraphOptimized(cobra's 2 optimizations + pruning)
# 7-strong session SI, 8-run append workload generated by Jepsen/Elle
# =====
# 9-Z3GSI + heuristic; 10-Z3 Adys SI + heuristic
# 11-Mono Adya SI + heuristic; 12-Mono Adys SI Optimzied + heuristic


def get_algo(algo_type):
    assert 0 <= algo_type <= 12, "Please provide a valid algo type"
    graph_cls = ArgumentedPolyGraph
    # graph_constructor = None

    if algo_type in [0, 1, 2, 4, 7, 9, 10, 11]:
        graph_constructor = build_graph4adyaSI.construct_graph_from_log
    elif algo_type in [3, 5, 6, 12]:
        graph_constructor = build_graph4adyaSI_chain.construct_graph_from_log
    elif algo_type in [8]:
        graph_constructor = build_graph4append.construct_graph_from_log
    else:
        assert False, "Not implemented yet"

    algo2checker = [Z3GeneralSIChecker, Z301Checker, MonoSAT_EdgeWeightSIChecker, MonoSAT_EdgeWeightSIChecker_Optimized,
                    MonoBCPolyGraphChecker, MonoBCPolyGraphCheckerOptimized, MonoBCPolyGraphCheckerOptimized,
                    MonoBCPolyGraphChecker, MonoBCPolyGraphCheckerOptimized,
                    Z3GeneralSIChecker, Z301Checker,
                    MonoSAT_EdgeWeightSIChecker, MonoSAT_EdgeWeightSIChecker_Optimized]

    checker = algo2checker[algo_type]

    return graph_cls, checker, graph_constructor
